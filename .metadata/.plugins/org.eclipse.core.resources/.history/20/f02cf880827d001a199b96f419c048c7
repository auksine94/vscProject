package controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import model.Joy;
import service.Joy_Service;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping(value = "/api")
public class Controller {

	@Autowired
	ImageRepository imageRepository;

	@PostMapping("/upload")
	public BodyBuilder uplaodImage(@RequestParam("imageFile") MultipartFile file) throws IOException {

		System.out.println("Original Image Byte Size - " + file.getBytes().length);
		ImageModel img = new ImageModel(file.getOriginalFilename(), file.getContentType(),
				compressZLib(file.getBytes()));
		imageRepository.save(img);
		return ResponseEntity.status(HttpStatus.OK);
	}

//	@GetMapping(path = { "/get/{imageName}" })
//	public ImageModel getImage(@PathVariable("imageName") String imageName) throws IOException {
//
//		final Optional<ImageModel> retrievedImage = imageRepository.findByName(imageName);
//		ImageModel img = new ImageModel(retrievedImage.get().getName(), retrievedImage.get().getType(),
//				decompressZLib(retrievedImage.get().getPicByte()));
//		return img;
//	}

	// compress the image bytes before storing it in the database
	public static byte[] compressZLib(byte[] data) {
		Deflater deflater = new Deflater();
		deflater.setInput(data);
		deflater.finish();

		ByteArrayOutputStream outputStream = new ByteArrayOutputStream(data.length);
		byte[] buffer = new byte[1024];
		while (!deflater.finished()) {
			int count = deflater.deflate(buffer);
			outputStream.write(buffer, 0, count);
		}
		try {
			outputStream.close();
		} catch (IOException e) {
		}
		System.out.println("Compressed Image Byte Size - " + outputStream.toByteArray().length);

		return outputStream.toByteArray();
	}

	// uncompress the image bytes before returning it to the angular application
	public static byte[] decompressZLib(byte[] data) {
		Inflater inflater = new Inflater();
		inflater.setInput(data);
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream(data.length);
		byte[] buffer = new byte[1024];
		try {
			while (!inflater.finished()) {
				int count = inflater.inflate(buffer);
				outputStream.write(buffer, 0, count);
			}
			outputStream.close();
		} catch (IOException ioe) {
		} catch (DataFormatException e) {
		}
		return outputStream.toByteArray();
	}
	
//	@Autowired
//	private Joy_Service joyService;
//
//	@GetMapping("joys-list")
//	public List<Joy> alljoys() {
//		return joyService.getJoys();
//	}
//	
//	@PostMapping("create-joy")
//	public boolean createJoy(@RequestBody Joy joy) {
//		return joyService.createJoy(joy);
//	}
//
//	@GetMapping("joy/{joy_id}")
//	public List<Joy> alljoyByID(@PathVariable("joy_id") int joy_id, Joy joy) {
//		joy.setJoy_id(joy_id);
//		return joyService.getJoyByID(joy);
//	}
//
//	@PostMapping("update-joy/{joy_id}")
//	public boolean updateJoy(@RequestBody Joy joy, @PathVariable("joy_id") int joy_id) {
//		joy.setJoy_id(joy_id);
//		return joyService.updateJoy(joy);
//	}
//	
//	@DeleteMapping("delete-joy/{joy_id}")
//	public boolean deleteJoy(@PathVariable("joy_id") int joy_id, Joy joy) {
//		joy.setJoy_id(joy_id);
//		return joyService.deleteJoy(joy);
//	}
}